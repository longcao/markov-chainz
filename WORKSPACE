# Git SHA of rules_scala we want to use.
rules_scala_version = "177e2eeb665899a0f116d20876c8c77b4ef27b98"

# Load http_archive functionality built into bazel. This allows us to pull down archives via HTTP.
load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Pull down rules_scala via HTTP.
http_archive(
    name = "io_bazel_rules_scala",
    strip_prefix = "rules_scala-%s" % rules_scala_version,
    type = "zip",
    url = "https://github.com/bazelbuild/rules_scala/archive/%s.zip" % rules_scala_version,
)

# Workaround for https://github.com/bazelbuild/rules_scala/issues/726
# TODO: fix me! ideally, don't do this
http_archive(
    name = "com_google_protobuf",
    sha256 = "9510dd2afc29e7245e9e884336f848c8a6600a14ae726adb6befdb4f786f0be2",
    strip_prefix = "protobuf-3.6.1.3",
    urls = ["https://github.com/protocolbuffers/protobuf/archive/v3.6.1.3.zip"],
)

# Load the scala_repositories rule from rules_scala.
load("@io_bazel_rules_scala//scala:scala.bzl", "scala_repositories")

# Call scala_repositories with our specified version of Scala and corresponding sha256 sums of the core Scala jars.
scala_repositories(scala_version_shas = (
    "2.12.8",
    {
        "scala_compiler": "f34e9119f45abd41e85b9e121ba19dd9288b3b4af7f7047e86dc70236708d170",
        "scala_library": "321fb55685635c931eba4bc0d7668349da3f2c09aee2de93a70566066ff25c28",
        "scala_reflect": "4d6405395c4599ce04cea08ba082339e3e42135de9aae2923c9f5367e957315a",
    },
))

# Register the customized scala_toolchain in toolchains/BUILD.
register_toolchains("//toolchains:my_scala_toolchain")

# Load maven_dependencies from the 3rdparty/workspace.bzl file generated by bazel-deps
load("//3rdparty:workspace.bzl", "maven_dependencies")

# Call repository_rule for all of our listed dependencies in dependencies.yaml,
# then bind these repositories to names that our auto-generated targets in 3rdparty expect.
# We can then use the targets in 3rdparty/ in our own BUILDs.
maven_dependencies()

## Setup the third_party repo
load("//3rdparty:target_file.bzl", "build_external_workspace")

build_external_workspace(name = "third_party_jvm")
